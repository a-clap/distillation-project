// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: net.proto

package osproto

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetClient is the client API for Net service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetClient interface {
	ListInterfaces(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Interfaces, error)
}

type netClient struct {
	cc grpc.ClientConnInterface
}

func NewNetClient(cc grpc.ClientConnInterface) NetClient {
	return &netClient{cc}
}

func (c *netClient) ListInterfaces(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Interfaces, error) {
	out := new(Interfaces)
	err := c.cc.Invoke(ctx, "/Net/ListInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetServer is the server API for Net service.
// All implementations must embed UnimplementedNetServer
// for forward compatibility
type NetServer interface {
	ListInterfaces(context.Context, *empty.Empty) (*Interfaces, error)
	mustEmbedUnimplementedNetServer()
}

// UnimplementedNetServer must be embedded to have forward compatible implementations.
type UnimplementedNetServer struct {
}

func (UnimplementedNetServer) ListInterfaces(context.Context, *empty.Empty) (*Interfaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (UnimplementedNetServer) mustEmbedUnimplementedNetServer() {}

// UnsafeNetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetServer will
// result in compilation errors.
type UnsafeNetServer interface {
	mustEmbedUnimplementedNetServer()
}

func RegisterNetServer(s grpc.ServiceRegistrar, srv NetServer) {
	s.RegisterService(&Net_ServiceDesc, srv)
}

func _Net_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Net/ListInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetServer).ListInterfaces(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Net_ServiceDesc is the grpc.ServiceDesc for Net service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Net_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Net",
	HandlerType: (*NetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInterfaces",
			Handler:    _Net_ListInterfaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "net.proto",
}
