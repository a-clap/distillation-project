// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: wifi.proto

package osproto

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WifiClient is the client API for Wifi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WifiClient interface {
	APs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*APReplies, error)
	Disconnect(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Connected(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConnectedReply, error)
	Connect(ctx context.Context, in *Network, opts ...grpc.CallOption) (*empty.Empty, error)
}

type wifiClient struct {
	cc grpc.ClientConnInterface
}

func NewWifiClient(cc grpc.ClientConnInterface) WifiClient {
	return &wifiClient{cc}
}

func (c *wifiClient) APs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*APReplies, error) {
	out := new(APReplies)
	err := c.cc.Invoke(ctx, "/Wifi/APs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiClient) Disconnect(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Wifi/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiClient) Connected(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConnectedReply, error) {
	out := new(ConnectedReply)
	err := c.cc.Invoke(ctx, "/Wifi/Connected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wifiClient) Connect(ctx context.Context, in *Network, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Wifi/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WifiServer is the server API for Wifi service.
// All implementations must embed UnimplementedWifiServer
// for forward compatibility
type WifiServer interface {
	APs(context.Context, *empty.Empty) (*APReplies, error)
	Disconnect(context.Context, *empty.Empty) (*empty.Empty, error)
	Connected(context.Context, *empty.Empty) (*ConnectedReply, error)
	Connect(context.Context, *Network) (*empty.Empty, error)
	mustEmbedUnimplementedWifiServer()
}

// UnimplementedWifiServer must be embedded to have forward compatible implementations.
type UnimplementedWifiServer struct {
}

func (UnimplementedWifiServer) APs(context.Context, *empty.Empty) (*APReplies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APs not implemented")
}
func (UnimplementedWifiServer) Disconnect(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedWifiServer) Connected(context.Context, *empty.Empty) (*ConnectedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connected not implemented")
}
func (UnimplementedWifiServer) Connect(context.Context, *Network) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedWifiServer) mustEmbedUnimplementedWifiServer() {}

// UnsafeWifiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WifiServer will
// result in compilation errors.
type UnsafeWifiServer interface {
	mustEmbedUnimplementedWifiServer()
}

func RegisterWifiServer(s grpc.ServiceRegistrar, srv WifiServer) {
	s.RegisterService(&Wifi_ServiceDesc, srv)
}

func _Wifi_APs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServer).APs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wifi/APs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServer).APs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wifi_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wifi/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServer).Disconnect(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wifi_Connected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServer).Connected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wifi/Connected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServer).Connected(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wifi_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WifiServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wifi/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WifiServer).Connect(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

// Wifi_ServiceDesc is the grpc.ServiceDesc for Wifi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wifi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Wifi",
	HandlerType: (*WifiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "APs",
			Handler:    _Wifi_APs_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Wifi_Disconnect_Handler,
		},
		{
			MethodName: "Connected",
			Handler:    _Wifi_Connected_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Wifi_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wifi.proto",
}
