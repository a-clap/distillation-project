// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: update.proto

package osproto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdateClient is the client API for Update service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateClient interface {
	ContinueUpdate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UpdateInformation, error)
	PullReleases(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	AvailableReleases(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Releases, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (Update_UpdateClient, error)
}

type updateClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateClient(cc grpc.ClientConnInterface) UpdateClient {
	return &updateClient{cc}
}

func (c *updateClient) ContinueUpdate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UpdateInformation, error) {
	out := new(UpdateInformation)
	err := c.cc.Invoke(ctx, "/Update/ContinueUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateClient) PullReleases(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/Update/PullReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateClient) AvailableReleases(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Releases, error) {
	out := new(Releases)
	err := c.cc.Invoke(ctx, "/Update/AvailableReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateClient) Update(ctx context.Context, opts ...grpc.CallOption) (Update_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Update_ServiceDesc.Streams[0], "/Update/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &updateUpdateClient{stream}
	return x, nil
}

type Update_UpdateClient interface {
	Send(*UpdateRequest) error
	Recv() (*UpdateResponse, error)
	grpc.ClientStream
}

type updateUpdateClient struct {
	grpc.ClientStream
}

func (x *updateUpdateClient) Send(m *UpdateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *updateUpdateClient) Recv() (*UpdateResponse, error) {
	m := new(UpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateServer is the server API for Update service.
// All implementations must embed UnimplementedUpdateServer
// for forward compatibility
type UpdateServer interface {
	ContinueUpdate(context.Context, *empty.Empty) (*UpdateInformation, error)
	PullReleases(context.Context, *empty.Empty) (*wrappers.BoolValue, error)
	AvailableReleases(context.Context, *empty.Empty) (*Releases, error)
	Update(Update_UpdateServer) error
	mustEmbedUnimplementedUpdateServer()
}

// UnimplementedUpdateServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateServer struct {
}

func (UnimplementedUpdateServer) ContinueUpdate(context.Context, *empty.Empty) (*UpdateInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueUpdate not implemented")
}
func (UnimplementedUpdateServer) PullReleases(context.Context, *empty.Empty) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullReleases not implemented")
}
func (UnimplementedUpdateServer) AvailableReleases(context.Context, *empty.Empty) (*Releases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableReleases not implemented")
}
func (UnimplementedUpdateServer) Update(Update_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUpdateServer) mustEmbedUnimplementedUpdateServer() {}

// UnsafeUpdateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateServer will
// result in compilation errors.
type UnsafeUpdateServer interface {
	mustEmbedUnimplementedUpdateServer()
}

func RegisterUpdateServer(s grpc.ServiceRegistrar, srv UpdateServer) {
	s.RegisterService(&Update_ServiceDesc, srv)
}

func _Update_ContinueUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).ContinueUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Update/ContinueUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).ContinueUpdate(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Update_PullReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).PullReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Update/PullReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).PullReleases(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Update_AvailableReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).AvailableReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Update/AvailableReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).AvailableReleases(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Update_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpdateServer).Update(&updateUpdateServer{stream})
}

type Update_UpdateServer interface {
	Send(*UpdateResponse) error
	Recv() (*UpdateRequest, error)
	grpc.ServerStream
}

type updateUpdateServer struct {
	grpc.ServerStream
}

func (x *updateUpdateServer) Send(m *UpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *updateUpdateServer) Recv() (*UpdateRequest, error) {
	m := new(UpdateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Update_ServiceDesc is the grpc.ServiceDesc for Update service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Update_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Update",
	HandlerType: (*UpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContinueUpdate",
			Handler:    _Update_ContinueUpdate_Handler,
		},
		{
			MethodName: "PullReleases",
			Handler:    _Update_PullReleases_Handler,
		},
		{
			MethodName: "AvailableReleases",
			Handler:    _Update_AvailableReleases_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Update",
			Handler:       _Update_Update_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "update.proto",
}
