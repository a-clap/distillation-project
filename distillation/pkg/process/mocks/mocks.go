// Code generated by MockGen. DO NOT EDIT.
// Source: distillation/pkg/process (interfaces: Clock,Heater,Sensor,Output)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClock is a mock of Clock interface.
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock.
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance.
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// Unix mocks base method.
func (m *MockClock) Unix() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unix")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Unix indicates an expected call of Unix.
func (mr *MockClockMockRecorder) Unix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unix", reflect.TypeOf((*MockClock)(nil).Unix))
}

// MockHeater is a mock of Heater interface.
type MockHeater struct {
	ctrl     *gomock.Controller
	recorder *MockHeaterMockRecorder
}

// MockHeaterMockRecorder is the mock recorder for MockHeater.
type MockHeaterMockRecorder struct {
	mock *MockHeater
}

// NewMockHeater creates a new mock instance.
func NewMockHeater(ctrl *gomock.Controller) *MockHeater {
	mock := &MockHeater{ctrl: ctrl}
	mock.recorder = &MockHeaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeater) EXPECT() *MockHeaterMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockHeater) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockHeaterMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockHeater)(nil).ID))
}

// SetPower mocks base method.
func (m *MockHeater) SetPower(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPower", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPower indicates an expected call of SetPower.
func (mr *MockHeaterMockRecorder) SetPower(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPower", reflect.TypeOf((*MockHeater)(nil).SetPower), arg0)
}

// MockSensor is a mock of Sensor interface.
type MockSensor struct {
	ctrl     *gomock.Controller
	recorder *MockSensorMockRecorder
}

// MockSensorMockRecorder is the mock recorder for MockSensor.
type MockSensorMockRecorder struct {
	mock *MockSensor
}

// NewMockSensor creates a new mock instance.
func NewMockSensor(ctrl *gomock.Controller) *MockSensor {
	mock := &MockSensor{ctrl: ctrl}
	mock.recorder = &MockSensorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSensor) EXPECT() *MockSensorMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockSensor) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockSensorMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSensor)(nil).ID))
}

// Temperature mocks base method.
func (m *MockSensor) Temperature() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Temperature")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Temperature indicates an expected call of Temperature.
func (mr *MockSensorMockRecorder) Temperature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Temperature", reflect.TypeOf((*MockSensor)(nil).Temperature))
}

// MockOutput is a mock of Output interface.
type MockOutput struct {
	ctrl     *gomock.Controller
	recorder *MockOutputMockRecorder
}

// MockOutputMockRecorder is the mock recorder for MockOutput.
type MockOutputMockRecorder struct {
	mock *MockOutput
}

// NewMockOutput creates a new mock instance.
func NewMockOutput(ctrl *gomock.Controller) *MockOutput {
	mock := &MockOutput{ctrl: ctrl}
	mock.recorder = &MockOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutput) EXPECT() *MockOutputMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockOutput) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockOutputMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockOutput)(nil).ID))
}

// Set mocks base method.
func (m *MockOutput) Set(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockOutputMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockOutput)(nil).Set), arg0)
}
