// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: distillationproto/process.proto

package distillationproto

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcessPhaseCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *ProcessPhaseCount) Reset() {
	*x = ProcessPhaseCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessPhaseCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessPhaseCount) ProtoMessage() {}

func (x *ProcessPhaseCount) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessPhaseCount.ProtoReflect.Descriptor instead.
func (*ProcessPhaseCount) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessPhaseCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PhaseNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=Number,proto3" json:"Number,omitempty"`
}

func (x *PhaseNumber) Reset() {
	*x = PhaseNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhaseNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhaseNumber) ProtoMessage() {}

func (x *PhaseNumber) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhaseNumber.ProtoReflect.Descriptor instead.
func (*PhaseNumber) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{1}
}

func (x *PhaseNumber) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type ProcessGlobalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count            int32                 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	PhaseConfig      []*ProcessPhaseConfig `protobuf:"bytes,2,rep,name=PhaseConfig,proto3" json:"PhaseConfig,omitempty"`
	GlobalGPIOConfig []*GPIOPhaseConfig    `protobuf:"bytes,3,rep,name=GlobalGPIOConfig,proto3" json:"GlobalGPIOConfig,omitempty"`
	Sensors          []string              `protobuf:"bytes,4,rep,name=Sensors,proto3" json:"Sensors,omitempty"`
}

func (x *ProcessGlobalConfig) Reset() {
	*x = ProcessGlobalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessGlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessGlobalConfig) ProtoMessage() {}

func (x *ProcessGlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessGlobalConfig.ProtoReflect.Descriptor instead.
func (*ProcessGlobalConfig) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessGlobalConfig) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ProcessGlobalConfig) GetPhaseConfig() []*ProcessPhaseConfig {
	if x != nil {
		return x.PhaseConfig
	}
	return nil
}

func (x *ProcessGlobalConfig) GetGlobalGPIOConfig() []*GPIOPhaseConfig {
	if x != nil {
		return x.GlobalGPIOConfig
	}
	return nil
}

func (x *ProcessGlobalConfig) GetSensors() []string {
	if x != nil {
		return x.Sensors
	}
	return nil
}

type GlobalGPIOConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*GPIOPhaseConfig `protobuf:"bytes,1,rep,name=Configs,proto3" json:"Configs,omitempty"`
}

func (x *GlobalGPIOConfig) Reset() {
	*x = GlobalGPIOConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalGPIOConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalGPIOConfig) ProtoMessage() {}

func (x *GlobalGPIOConfig) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalGPIOConfig.ProtoReflect.Descriptor instead.
func (*GlobalGPIOConfig) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{3}
}

func (x *GlobalGPIOConfig) GetConfigs() []*GPIOPhaseConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type ProcessPhaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number  *PhaseNumber         `protobuf:"bytes,1,opt,name=Number,proto3" json:"Number,omitempty"`
	Next    *MoveToNextConfig    `protobuf:"bytes,2,opt,name=Next,proto3" json:"Next,omitempty"`
	Heaters []*HeaterPhaseConfig `protobuf:"bytes,3,rep,name=Heaters,proto3" json:"Heaters,omitempty"`
	GPIO    []*GPIOPhaseConfig   `protobuf:"bytes,4,rep,name=GPIO,proto3" json:"GPIO,omitempty"`
}

func (x *ProcessPhaseConfig) Reset() {
	*x = ProcessPhaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessPhaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessPhaseConfig) ProtoMessage() {}

func (x *ProcessPhaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessPhaseConfig.ProtoReflect.Descriptor instead.
func (*ProcessPhaseConfig) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{4}
}

func (x *ProcessPhaseConfig) GetNumber() *PhaseNumber {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *ProcessPhaseConfig) GetNext() *MoveToNextConfig {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *ProcessPhaseConfig) GetHeaters() []*HeaterPhaseConfig {
	if x != nil {
		return x.Heaters
	}
	return nil
}

func (x *ProcessPhaseConfig) GetGPIO() []*GPIOPhaseConfig {
	if x != nil {
		return x.GPIO
	}
	return nil
}

type ProcessConfigValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool   `protobuf:"varint,1,opt,name=Valid,proto3" json:"Valid,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *ProcessConfigValidation) Reset() {
	*x = ProcessConfigValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessConfigValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConfigValidation) ProtoMessage() {}

func (x *ProcessConfigValidation) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConfigValidation.ProtoReflect.Descriptor instead.
func (*ProcessConfigValidation) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{5}
}

func (x *ProcessConfigValidation) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ProcessConfigValidation) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type MoveToNextConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            int32   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	SensorID        string  `protobuf:"bytes,2,opt,name=SensorID,proto3" json:"SensorID,omitempty"`
	SensorThreshold float32 `protobuf:"fixed32,3,opt,name=SensorThreshold,proto3" json:"SensorThreshold,omitempty"`
	TimeLeft        int64   `protobuf:"varint,4,opt,name=TimeLeft,proto3" json:"TimeLeft,omitempty"`
}

func (x *MoveToNextConfig) Reset() {
	*x = MoveToNextConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveToNextConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToNextConfig) ProtoMessage() {}

func (x *MoveToNextConfig) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToNextConfig.ProtoReflect.Descriptor instead.
func (*MoveToNextConfig) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{6}
}

func (x *MoveToNextConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MoveToNextConfig) GetSensorID() string {
	if x != nil {
		return x.SensorID
	}
	return ""
}

func (x *MoveToNextConfig) GetSensorThreshold() float32 {
	if x != nil {
		return x.SensorThreshold
	}
	return 0
}

func (x *MoveToNextConfig) GetTimeLeft() int64 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

type HeaterPhaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Power int32  `protobuf:"varint,2,opt,name=Power,proto3" json:"Power,omitempty"`
}

func (x *HeaterPhaseConfig) Reset() {
	*x = HeaterPhaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaterPhaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaterPhaseConfig) ProtoMessage() {}

func (x *HeaterPhaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaterPhaseConfig.ProtoReflect.Descriptor instead.
func (*HeaterPhaseConfig) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{7}
}

func (x *HeaterPhaseConfig) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HeaterPhaseConfig) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

type GPIOPhaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SensorID   string  `protobuf:"bytes,2,opt,name=SensorID,proto3" json:"SensorID,omitempty"`
	TLow       float32 `protobuf:"fixed32,3,opt,name=TLow,proto3" json:"TLow,omitempty"`
	THigh      float32 `protobuf:"fixed32,4,opt,name=THigh,proto3" json:"THigh,omitempty"`
	Hysteresis float32 `protobuf:"fixed32,5,opt,name=Hysteresis,proto3" json:"Hysteresis,omitempty"`
	Inverted   bool    `protobuf:"varint,6,opt,name=Inverted,proto3" json:"Inverted,omitempty"`
	Enabled    bool    `protobuf:"varint,7,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
}

func (x *GPIOPhaseConfig) Reset() {
	*x = GPIOPhaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPIOPhaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPIOPhaseConfig) ProtoMessage() {}

func (x *GPIOPhaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPIOPhaseConfig.ProtoReflect.Descriptor instead.
func (*GPIOPhaseConfig) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{8}
}

func (x *GPIOPhaseConfig) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GPIOPhaseConfig) GetSensorID() string {
	if x != nil {
		return x.SensorID
	}
	return ""
}

func (x *GPIOPhaseConfig) GetTLow() float32 {
	if x != nil {
		return x.TLow
	}
	return 0
}

func (x *GPIOPhaseConfig) GetTHigh() float32 {
	if x != nil {
		return x.THigh
	}
	return 0
}

func (x *GPIOPhaseConfig) GetHysteresis() float32 {
	if x != nil {
		return x.Hysteresis
	}
	return 0
}

func (x *GPIOPhaseConfig) GetInverted() bool {
	if x != nil {
		return x.Inverted
	}
	return false
}

func (x *GPIOPhaseConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ProcessConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable     bool `protobuf:"varint,1,opt,name=Enable,proto3" json:"Enable,omitempty"`
	MoveToNext bool `protobuf:"varint,2,opt,name=MoveToNext,proto3" json:"MoveToNext,omitempty"`
	Disable    bool `protobuf:"varint,3,opt,name=Disable,proto3" json:"Disable,omitempty"`
}

func (x *ProcessConfig) Reset() {
	*x = ProcessConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConfig) ProtoMessage() {}

func (x *ProcessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConfig.ProtoReflect.Descriptor instead.
func (*ProcessConfig) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *ProcessConfig) GetMoveToNext() bool {
	if x != nil {
		return x.MoveToNext
	}
	return false
}

func (x *ProcessConfig) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

type ProcessStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Running     bool                      `protobuf:"varint,1,opt,name=Running,proto3" json:"Running,omitempty"`
	Done        bool                      `protobuf:"varint,2,opt,name=Done,proto3" json:"Done,omitempty"`
	PhaseNumber int32                     `protobuf:"varint,3,opt,name=PhaseNumber,proto3" json:"PhaseNumber,omitempty"`
	StartTime   int64                     `protobuf:"varint,4,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime     int64                     `protobuf:"varint,5,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Next        *MoveToNextStatus         `protobuf:"bytes,6,opt,name=Next,proto3" json:"Next,omitempty"`
	Heaters     []*HeaterPhaseStatus      `protobuf:"bytes,7,rep,name=Heaters,proto3" json:"Heaters,omitempty"`
	Temperature []*TemperaturePhaseStatus `protobuf:"bytes,8,rep,name=Temperature,proto3" json:"Temperature,omitempty"`
	GPIO        []*GPIOPhaseStatus        `protobuf:"bytes,9,rep,name=GPIO,proto3" json:"GPIO,omitempty"`
	Errors      []string                  `protobuf:"bytes,10,rep,name=Errors,proto3" json:"Errors,omitempty"`
}

func (x *ProcessStatus) Reset() {
	*x = ProcessStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatus) ProtoMessage() {}

func (x *ProcessStatus) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatus.ProtoReflect.Descriptor instead.
func (*ProcessStatus) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{10}
}

func (x *ProcessStatus) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *ProcessStatus) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *ProcessStatus) GetPhaseNumber() int32 {
	if x != nil {
		return x.PhaseNumber
	}
	return 0
}

func (x *ProcessStatus) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ProcessStatus) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ProcessStatus) GetNext() *MoveToNextStatus {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *ProcessStatus) GetHeaters() []*HeaterPhaseStatus {
	if x != nil {
		return x.Heaters
	}
	return nil
}

func (x *ProcessStatus) GetTemperature() []*TemperaturePhaseStatus {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (x *ProcessStatus) GetGPIO() []*GPIOPhaseStatus {
	if x != nil {
		return x.GPIO
	}
	return nil
}

func (x *ProcessStatus) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type TemperaturePhaseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Temperature float32 `protobuf:"fixed32,2,opt,name=Temperature,proto3" json:"Temperature,omitempty"`
}

func (x *TemperaturePhaseStatus) Reset() {
	*x = TemperaturePhaseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperaturePhaseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperaturePhaseStatus) ProtoMessage() {}

func (x *TemperaturePhaseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperaturePhaseStatus.ProtoReflect.Descriptor instead.
func (*TemperaturePhaseStatus) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{11}
}

func (x *TemperaturePhaseStatus) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TemperaturePhaseStatus) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

type GPIOPhaseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	State bool   `protobuf:"varint,2,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *GPIOPhaseStatus) Reset() {
	*x = GPIOPhaseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPIOPhaseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPIOPhaseStatus) ProtoMessage() {}

func (x *GPIOPhaseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPIOPhaseStatus.ProtoReflect.Descriptor instead.
func (*GPIOPhaseStatus) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{12}
}

func (x *GPIOPhaseStatus) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GPIOPhaseStatus) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type HeaterPhaseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Power int32  `protobuf:"varint,2,opt,name=Power,proto3" json:"Power,omitempty"`
}

func (x *HeaterPhaseStatus) Reset() {
	*x = HeaterPhaseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaterPhaseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaterPhaseStatus) ProtoMessage() {}

func (x *HeaterPhaseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaterPhaseStatus.ProtoReflect.Descriptor instead.
func (*HeaterPhaseStatus) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{13}
}

func (x *HeaterPhaseStatus) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HeaterPhaseStatus) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

type MoveToNextStatusTemperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorID        string  `protobuf:"bytes,1,opt,name=SensorID,proto3" json:"SensorID,omitempty"`
	SensorThreshold float32 `protobuf:"fixed32,2,opt,name=SensorThreshold,proto3" json:"SensorThreshold,omitempty"`
	TimeLeft        int64   `protobuf:"varint,3,opt,name=TimeLeft,proto3" json:"TimeLeft,omitempty"`
}

func (x *MoveToNextStatusTemperature) Reset() {
	*x = MoveToNextStatusTemperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveToNextStatusTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToNextStatusTemperature) ProtoMessage() {}

func (x *MoveToNextStatusTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToNextStatusTemperature.ProtoReflect.Descriptor instead.
func (*MoveToNextStatusTemperature) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{14}
}

func (x *MoveToNextStatusTemperature) GetSensorID() string {
	if x != nil {
		return x.SensorID
	}
	return ""
}

func (x *MoveToNextStatusTemperature) GetSensorThreshold() float32 {
	if x != nil {
		return x.SensorThreshold
	}
	return 0
}

func (x *MoveToNextStatusTemperature) GetTimeLeft() int64 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

type MoveToNextStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        int32                        `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	TimeLeft    int64                        `protobuf:"varint,2,opt,name=TimeLeft,proto3" json:"TimeLeft,omitempty"`
	Temperature *MoveToNextStatusTemperature `protobuf:"bytes,3,opt,name=Temperature,proto3" json:"Temperature,omitempty"`
}

func (x *MoveToNextStatus) Reset() {
	*x = MoveToNextStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_distillationproto_process_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveToNextStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveToNextStatus) ProtoMessage() {}

func (x *MoveToNextStatus) ProtoReflect() protoreflect.Message {
	mi := &file_distillationproto_process_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveToNextStatus.ProtoReflect.Descriptor instead.
func (*MoveToNextStatus) Descriptor() ([]byte, []int) {
	return file_distillationproto_process_proto_rawDescGZIP(), []int{15}
}

func (x *MoveToNextStatus) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MoveToNextStatus) GetTimeLeft() int64 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

func (x *MoveToNextStatus) GetTemperature() *MoveToNextStatusTemperature {
	if x != nil {
		return x.Temperature
	}
	return nil
}

var File_distillationproto_process_proto protoreflect.FileDescriptor

var file_distillationproto_process_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x29, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x0b,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x47, 0x50, 0x49, 0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x47, 0x50, 0x49, 0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x22, 0x50, 0x0a, 0x10, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x50,
	0x49, 0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50,
	0x49, 0x4f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a,
	0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4e, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x3e,
	0x0a, 0x07, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36,
	0x0a, 0x04, 0x47, 0x50, 0x49, 0x4f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x04, 0x47, 0x50, 0x49, 0x4f, 0x22, 0x45, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x88, 0x01,
	0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x39, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x4c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x54, 0x4c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x48, 0x69, 0x67, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x54, 0x48, 0x69, 0x67, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x48, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x48, 0x79, 0x73, 0x74, 0x65, 0x72, 0x65, 0x73, 0x69, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x61, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x04, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x07, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x47, 0x50, 0x49, 0x4f, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x47, 0x50, 0x49, 0x4f, 0x12, 0x16,
	0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x16, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x37, 0x0a, 0x0f, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x39, 0x0a, 0x11, 0x48,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x1b, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f,
	0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65,
	0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x50, 0x0a, 0x0b,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0xa9,
	0x06, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x25, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x25, 0x2e, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x50, 0x49,
	0x4f, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x50, 0x49, 0x4f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x23, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x47, 0x50, 0x49, 0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x20, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x42, 0x33, 0x50, 0x01, 0x5a, 0x2f,
	0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_distillationproto_process_proto_rawDescOnce sync.Once
	file_distillationproto_process_proto_rawDescData = file_distillationproto_process_proto_rawDesc
)

func file_distillationproto_process_proto_rawDescGZIP() []byte {
	file_distillationproto_process_proto_rawDescOnce.Do(func() {
		file_distillationproto_process_proto_rawDescData = protoimpl.X.CompressGZIP(file_distillationproto_process_proto_rawDescData)
	})
	return file_distillationproto_process_proto_rawDescData
}

var file_distillationproto_process_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_distillationproto_process_proto_goTypes = []interface{}{
	(*ProcessPhaseCount)(nil),           // 0: distillationproto.ProcessPhaseCount
	(*PhaseNumber)(nil),                 // 1: distillationproto.PhaseNumber
	(*ProcessGlobalConfig)(nil),         // 2: distillationproto.ProcessGlobalConfig
	(*GlobalGPIOConfig)(nil),            // 3: distillationproto.GlobalGPIOConfig
	(*ProcessPhaseConfig)(nil),          // 4: distillationproto.ProcessPhaseConfig
	(*ProcessConfigValidation)(nil),     // 5: distillationproto.ProcessConfigValidation
	(*MoveToNextConfig)(nil),            // 6: distillationproto.MoveToNextConfig
	(*HeaterPhaseConfig)(nil),           // 7: distillationproto.HeaterPhaseConfig
	(*GPIOPhaseConfig)(nil),             // 8: distillationproto.GPIOPhaseConfig
	(*ProcessConfig)(nil),               // 9: distillationproto.ProcessConfig
	(*ProcessStatus)(nil),               // 10: distillationproto.ProcessStatus
	(*TemperaturePhaseStatus)(nil),      // 11: distillationproto.TemperaturePhaseStatus
	(*GPIOPhaseStatus)(nil),             // 12: distillationproto.GPIOPhaseStatus
	(*HeaterPhaseStatus)(nil),           // 13: distillationproto.HeaterPhaseStatus
	(*MoveToNextStatusTemperature)(nil), // 14: distillationproto.MoveToNextStatusTemperature
	(*MoveToNextStatus)(nil),            // 15: distillationproto.MoveToNextStatus
	(*empty.Empty)(nil),                 // 16: google.protobuf.Empty
}
var file_distillationproto_process_proto_depIdxs = []int32{
	4,  // 0: distillationproto.ProcessGlobalConfig.PhaseConfig:type_name -> distillationproto.ProcessPhaseConfig
	8,  // 1: distillationproto.ProcessGlobalConfig.GlobalGPIOConfig:type_name -> distillationproto.GPIOPhaseConfig
	8,  // 2: distillationproto.GlobalGPIOConfig.Configs:type_name -> distillationproto.GPIOPhaseConfig
	1,  // 3: distillationproto.ProcessPhaseConfig.Number:type_name -> distillationproto.PhaseNumber
	6,  // 4: distillationproto.ProcessPhaseConfig.Next:type_name -> distillationproto.MoveToNextConfig
	7,  // 5: distillationproto.ProcessPhaseConfig.Heaters:type_name -> distillationproto.HeaterPhaseConfig
	8,  // 6: distillationproto.ProcessPhaseConfig.GPIO:type_name -> distillationproto.GPIOPhaseConfig
	15, // 7: distillationproto.ProcessStatus.Next:type_name -> distillationproto.MoveToNextStatus
	13, // 8: distillationproto.ProcessStatus.Heaters:type_name -> distillationproto.HeaterPhaseStatus
	11, // 9: distillationproto.ProcessStatus.Temperature:type_name -> distillationproto.TemperaturePhaseStatus
	12, // 10: distillationproto.ProcessStatus.GPIO:type_name -> distillationproto.GPIOPhaseStatus
	14, // 11: distillationproto.MoveToNextStatus.Temperature:type_name -> distillationproto.MoveToNextStatusTemperature
	16, // 12: distillationproto.Process.GetGlobalConfig:input_type -> google.protobuf.Empty
	16, // 13: distillationproto.Process.GetPhaseCount:input_type -> google.protobuf.Empty
	1,  // 14: distillationproto.Process.GetPhaseConfig:input_type -> distillationproto.PhaseNumber
	0,  // 15: distillationproto.Process.ConfigurePhaseCount:input_type -> distillationproto.ProcessPhaseCount
	4,  // 16: distillationproto.Process.ConfigurePhase:input_type -> distillationproto.ProcessPhaseConfig
	16, // 17: distillationproto.Process.ValidateConfig:input_type -> google.protobuf.Empty
	3,  // 18: distillationproto.Process.ConfigureGlobalGPIO:input_type -> distillationproto.GlobalGPIOConfig
	9,  // 19: distillationproto.Process.EnableProcess:input_type -> distillationproto.ProcessConfig
	16, // 20: distillationproto.Process.Status:input_type -> google.protobuf.Empty
	2,  // 21: distillationproto.Process.GetGlobalConfig:output_type -> distillationproto.ProcessGlobalConfig
	0,  // 22: distillationproto.Process.GetPhaseCount:output_type -> distillationproto.ProcessPhaseCount
	4,  // 23: distillationproto.Process.GetPhaseConfig:output_type -> distillationproto.ProcessPhaseConfig
	0,  // 24: distillationproto.Process.ConfigurePhaseCount:output_type -> distillationproto.ProcessPhaseCount
	4,  // 25: distillationproto.Process.ConfigurePhase:output_type -> distillationproto.ProcessPhaseConfig
	5,  // 26: distillationproto.Process.ValidateConfig:output_type -> distillationproto.ProcessConfigValidation
	3,  // 27: distillationproto.Process.ConfigureGlobalGPIO:output_type -> distillationproto.GlobalGPIOConfig
	9,  // 28: distillationproto.Process.EnableProcess:output_type -> distillationproto.ProcessConfig
	10, // 29: distillationproto.Process.Status:output_type -> distillationproto.ProcessStatus
	21, // [21:30] is the sub-list for method output_type
	12, // [12:21] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_distillationproto_process_proto_init() }
func file_distillationproto_process_proto_init() {
	if File_distillationproto_process_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_distillationproto_process_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessPhaseCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhaseNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessGlobalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalGPIOConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessPhaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessConfigValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveToNextConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaterPhaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPIOPhaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperaturePhaseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPIOPhaseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaterPhaseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveToNextStatusTemperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_distillationproto_process_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveToNextStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_distillationproto_process_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_distillationproto_process_proto_goTypes,
		DependencyIndexes: file_distillationproto_process_proto_depIdxs,
		MessageInfos:      file_distillationproto_process_proto_msgTypes,
	}.Build()
	File_distillationproto_process_proto = out.File
	file_distillationproto_process_proto_rawDesc = nil
	file_distillationproto_process_proto_goTypes = nil
	file_distillationproto_process_proto_depIdxs = nil
}
